const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!');
  console.log('SUPABASE_URL:', !!supabaseUrl);
  console.log('SUPABASE_KEY:', !!supabaseKey);
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testarColaboradores() {
  console.log('üß™ Iniciando teste da tabela colaboradores...\n');

  try {
    // Teste 1: Verificar se a tabela existe
    console.log('1Ô∏è‚É£ Teste b√°sico de acesso √† tabela...');
    const { count: teste1, error: erro1 } = await supabase
      .from('colaboradores')
      .select('*', { count: 'exact', head: true });

    if (erro1) {
      console.error('‚ùå Erro no teste b√°sico:', erro1);
      return;
    }
    console.log('‚úÖ Tabela acess√≠vel, contagem:', teste1);

    // Teste 2: Verificar campos dispon√≠veis
    console.log('\n2Ô∏è‚É£ Verificando campos dispon√≠veis...');
    const { data: teste2, error: erro2 } = await supabase
      .from('colaboradores')
      .select('*')
      .limit(1);

    if (erro2) {
      console.error('‚ùå Erro ao buscar campos:', erro2);
      return;
    }

    if (teste2 && teste2.length > 0) {
      console.log('‚úÖ Campos dispon√≠veis:', Object.keys(teste2[0]));
      console.log('üìã Exemplo de registro:', teste2[0]);
    } else {
      console.log('‚ö†Ô∏è Nenhum registro encontrado na tabela');
    }

    // Teste 3: Buscar colaboradores com nome_completo
    console.log('\n3Ô∏è‚É£ Buscando colaboradores com nome_completo...');
    const { data: teste3, error: erro3 } = await supabase
      .from('colaboradores')
      .select('id, nome_completo, cargo, status')
      .limit(10);

    if (erro3) {
      console.error('‚ùå Erro ao buscar nome_completo:', erro3);
      return;
    }

    console.log('‚úÖ Colaboradores encontrados:', teste3?.length || 0);
    if (teste3 && teste3.length > 0) {
      console.log('üìã Exemplos:');
      teste3.slice(0, 5).forEach((col, idx) => {
        console.log(`  ${idx + 1}. ${col.nome_completo} - ${col.cargo || 'Sem cargo'} - Status: ${col.status}`);
      });
    }

    // Teste 4: Filtrar apenas ativos (usando status)
    console.log('\n4Ô∏è‚É£ Buscando apenas colaboradores ativos...');
    const { data: teste4, error: erro4 } = await supabase
      .from('colaboradores')
      .select('id, nome_completo, cargo')
      .eq('status', 'ativo')
      .limit(10);

    if (erro4) {
      console.error('‚ùå Erro ao filtrar ativos:', erro4);
      return;
    }

    console.log('‚úÖ Colaboradores ativos encontrados:', teste4?.length || 0);
    if (teste4 && teste4.length > 0) {
      console.log('üìã Exemplos de ativos:');
      teste4.slice(0, 5).forEach((col, idx) => {
        console.log(`  ${idx + 1}. ${col.nome_completo} - ${col.cargo || 'Sem cargo'}`);
      });
    }

    // Teste 5: Verificar se h√° RLS ativo
    console.log('\n5Ô∏è‚É£ Verificando informa√ß√µes da tabela...');
    const { data: infoTabela, error: erroInfo } = await supabase
      .rpc('get_table_info', { table_name: 'colaboradores' })
      .single();

    if (erroInfo) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel obter informa√ß√µes RLS (fun√ß√£o n√£o existe)');
    } else {
      console.log('‚úÖ Informa√ß√µes da tabela:', infoTabela);
    }

  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
  }
}

testarColaboradores();
